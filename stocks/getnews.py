#!/usr/local/bin/python 

#GENERATED BY /aiservices/notebooks/stocks/01_GetData.ipynb

import os, datetime, glob, sys, time, datetime, colabexts, shutil, argparse
import numpy as np
import pandas as pd
import csv, requests
from colabexts.jcommon import *

import http.client, urllib.parse, json
sys.path.append("/opt/data/data/stocks")
from utils import *
#-----------------------------------------------------------------------------------
'''
This will read required symbols and saves them to data directory
'''
API_KEY, NEWS_KEY = getkey()


def getNews(keywords, access_key = NEWS_KEY, limit=10, sources='bloomberg,yahoo,cnbc,cnn,reuters,ft'):
    conn = http.client.HTTPConnection('api.mediastack.com')
    params = urllib.parse.urlencode({
        'access_key': access_key,
        'sources': sources,
        #'categories':'',
        'keywords': keywords,
        'sort': 'published_desc',
        'countries':'us',
        'language':'en',
        'limit': limit
        })

    conn.request('GET', '/v1/news?{}'.format(params))

    res = conn.getresponse()
    data2 = res.read()
    ret = data2.decode('utf-8')
    return ret

def getNewsAll(access_key = NEWS_KEY, check_recent=4 * 60 *60):
    base = "/opt/data/data/stocks/data/"    
    df=pd.read_csv(base + "stocks.csv")

    for r in df.iterrows():
        symb, name = r[1]['symbol'].lower(), r[1]['name']
        print(symb, name)
        newsfile = f'{base}{symb}/news_raw.json'
        keys = f'{name} {symb}'

        if chk_recent(newsfile, check_recent):
            print(f"News file exist: {newsfile} - {keys}")
            continue

        print(f"Trying to create news.html for: {keys}")
        ret = getNews(keys, access_key)
        rej = json.loads(ret)
        dat = rej.get("data", None)
        if (not dat or len(data) < 1):
            print(f"Did not get any data for: {keys} :(")
        else:    
            with open(newsfile, "w") as f:
                f.write(ret)
            
    return df;

def formatNews(data):  # d is a json
    if ( len(data) < 1):
        return "No news"
    if ( len(data) < 2):
        d1, d2 = data[0], data[0]
    else:
        d1, d2 = data[0], data[1]
        
    img1, img2 = "", ""
    if ( d1['image'] and d1['image'].lower() != 'none'):
        img1 = f'<img style="border-radius: 5%;" src={d1["image"]} width=100%>'
    if ( d2['image'] and d2['image'].lower() != 'none'):
        img2 = f'<img style="border-radius: 5%;" src={d2["image"]} width=100%>'

    
    html = f'''
<div class="row">
<div class="col-md-5" style="border-radius: 5%;background: #f0f0f0;min-height:148px;margin:10px">
    {img1}<br/>
    {d1['published_at']} {d1['source']} <br/>

    <a href="{d1['url']}" target=new>
    <span title='{d1['description']}'><h3>{d1['title']}</h3></span>
    </a>
</div>
<div class="col-md-6"  style="border-radius: 5%;background: #f0f0f0;min-height:148px; margin:10px">
    {img2}<br/>
    {d2['published_at']} {d2['source']} <br/>

    <a href="{d2['url']}" target=new>
    <span title='{d2['description']}'><h3>{d2['title']}</h3></span>
    </a>
</div>
</div>
'''
    if ( len(data) < 5):
        return html

    o= '<br/><div class="row" style="padding:10px;">\n'
    for i in range(2, 5):
        d = data[i]
        im = ":::"
        if ( d['image'] and d['image'].lower() != 'none'):
            im = f'<img style="border-radius: 5%;" src={d["image"]} width=100%>'

        wclass = "col-md-3" if i == 2 else "col-md-4"
        t = f'''
        <div class="{wclass}" style="border-radius: 5%;border: 1px solid #c0c0c0;min-height:148px;margin:10px">
            {im}<br/>
            {d['published_at']} {d['source']} <br/>

            <a href="{d['url']}" target=new>
            <span title='{d['description']}'><h4>{d['title']}</h4></span>
            </a>
        </div>
        '''
        o += t
    o += '</div>'
    
    return html + "\n\n" + o
    
    
def prepNews(symb='aapl', check_recent=60*60):
    base = "/opt/data/data/stocks/data/"    
    newsjson = f'{base}{symb}/news_raw.json'
    newsfile = f'{base}{symb}/news.html'
    
    if not os.path.exists(newsjson):
        print(f"-{newsjson} does not exist!!")
        
    if chk_newer(newsfile, newsjson): 
        print(f"-{newsfile} already created :;!!")
        return;
    
    news = readFile(newsjson)
    news = json.loads(news)
    data = news.get('data', None)
    if ( not data):
        print(f"-{newsfile} No data available!!")
        return;
    ret = formatNews(data) 
    with open(newsfile, "w") as f:
        f.write(ret)
#-----------------------------------------------------------------------------------
def main():
    df = getNewsAll(access_key = NEWS_KEY, check_recent=1 * 60 *60)
    for r in df.iterrows():
        symb, name = r[1]['symbol'].lower(), r[1]['name']
        prepNews(symb)
    
#-----------------------------------------------------------------------------------
if __name__ == '__main__':
    if (not inJupyter()):
        t1 = datetime.datetime.now()
        main()
        t2 = datetime.datetime.now()
        print(f"All Done in {str(t2-t1)} : {t2} ***")
    else:
        pass
        
#df2, df4 = processfiles('aapl')
#create_fig(path, df2)

#!/usr/local/bin/python 

#GENERATED BY /aiservices/notebooks/stocks/01_GetData.ipynb

import os, datetime, glob, sys, time, datetime, colabexts, shutil, argparse, requests
import numpy as np
import pandas as pd
import csv, requests
from colabexts.jcommon import *

import http.client, urllib.parse, json
sys.path.append("/opt/data/data/stocks")
from utils import *

BASE = "/opt/data/data/stocks/data/"
#-----------------------------------------------------------------------------------
'''
This will read keys for accessing
'''
def getkey(key='password'):
    MARKET_STACK_KEY, file =None, os.path.expanduser('~/.keys/keys.json')
    r = readfile(file, "{}")
    j = eval(r)
    return j['MARKET_STACK_KEY']

MARKET_STACK_KEY = getkey()

#-----------------------------------------------------------------------------------
def get_all_tickers(symb='', key= MARKET_STACK_KEY ):
    url    = 'https://api.marketstack.com/v1/tickers'
    params = {
        'access_key': key,
        'limit'     : 1000000
    }
    #res = requests.get('https://api.marketstack.com/v1/tickers/aapl/eod', params)
    res = requests.get(url, params)
    rej = res.json()
    
    with open(f"{BASE}/tickers.json", "w") as f:
        f.write(json.dumps(rej, indent=3) )
    
    return rej
#-----------------------------------------------------------------------------------
def getAllDFs(BASE=BASE):
    dfs, symbs = [], [];
    for (dirpath, dirnames, filenames) in os.walk(BASE):
        for d in dirnames:
            file = f'{BASE}{d}/daily_intra_marketstack.json'
            #print(f'Trying {file}')
            if ( os.path.exists(file)):
                r = readfile(file, "")
                rej = json.loads(ret)
                if rej.get('data', ""):
                    df = pd.DataFrame(rej['data'])
                    
                    sy = df['symbol'].iloc[0]
                    df = df["date,open,volume".split(',')]
                    df = df.ffill().bfill()
                    df.columns = ['timestamp'] + [f'{sy}_{c}' for c in df.columns[1:]]
                    
                    dfs.append(df)
                    symbs.append(d)
            else:
                print(f'{symbs[i]} data not available')
                
    return dfs, symbs
#-----------------------------------------------------------------------------------
def getAllTimes(dfs=[]):
    ar=np.array([d['timestamp'].values for d in dfs])
    at=np.concatenate(ar)
    at=set(at)
    af = pd.DataFrame()
    af['timestamp'] = list(at);
    return af
#-----------------------------------------------------------------------------------
def combineAll(BASE=BASE):
    dfs, symbs = getAllDFs()
    af = getAllTimes(dfs)

    for d in dfs:
        af=pd.merge(af, d, how="left", left_on="timestamp".split(), right_on="timestamp".split())
    af.sort_values(by='timestamp', ascending=True, inplace=True)
    af.ffill(inplace=True)
    af.bfill(inplace=True)
    af.reset_index(drop=True, inplace=True)
    af.dropna(inplace=True)
    
    outf = f'{BASE}combined.csv'
    af.to_csv(outf, index=False)
#-----------------------------------------------------------------------------------
#api_result = requests.get('https://api.marketstack.com/v1/tickers/aapl/eod', params)
def get_intraday(symb='', key= MARKET_STACK_KEY, start="1970-01-01", end="", 
                 interval = '1min,5min,10min,15min,30min,1hour,3hour,6hour,12hour,24hour',
                 age      = 24 * 60 * 60):
    url    = 'http://api.marketstack.com/v1/intraday'
    end    = end or datetime.datetime.today().strftime('%Y-%m-%d')
    
    params = {
        'access_key': key,
        'symbols'   : symb,
        'limit'     : 1000000,
        'date_from' : start,
        'date_to'   : end,
        #'interval'  : interval
    }
    dst = f"{BASE}{symb}"
    if ( not os.path.exists(dst) ):
        os.makedirs(dst)
    dsf = f"{dst}/daily_intra_marketstack.json"
    if chk_recent(dsf, age):
        print(f"{dsf} is too new")
        return None
    #print(params)
    print(f"Getting {symb} and save in: {dsf}")
    
    res = requests.get('https://api.marketstack.com/v1/tickers/aapl/eod', params)
    res = requests.get(url, params)
    rej = res.json()
    dst = f"{BASE}{symb}"
        
    with open(dsf, "w") as f:
        f.write(json.dumps(rej, indent=3) )
    
    return rej
#-----------------------------------------------------------------------------------
def getAllinPath(path=BASE):
    for (dirpath, dirnames, filenames) in os.walk(path):
        for d in dirnames:
            if ( os.path.exists(f'{path}{d}/daily.csv')):
                #print(f"+ Trying {d} getdata({d})")
                get_intraday(d)
                pass
#-----------------------------------------------------------------------------------
def main():
    getAllinPath();
    combineAll()
    pass
#-----------------------------------------------------------------------------------
sysargs = None
def addargs():
    global sysargs
    p = argparse.ArgumentParser(f"{os.path.basename(sys.argv[0])}:")
    p.add_argument('-s', '--symbols', type=str, default="", help=f"")
    p.add_argument('-r', '--runall' , action='store_false', help= f"Run all")

    try:
        sysargs, unknown=p.parse_known_args(sys.argv[1:])
    except argparse.ArgumentError as exc:
        print(exc.message )
        
    if (unknown):
        print("Unknown options: ", unknown)
        #p.print_help()
    return sysargs
#-----------------------------------------------------------------------------------
if __name__ == '__main__':
    if (not inJupyter()):
        t1      = datetime.datetime.now()
        sysargs = addargs()
        main()
        t2 = datetime.datetime.now()
        print(f"All Done in {str(t2-t1)} seconds : {t2} ***")
    else:
        pass
#print(f'Key: {MARKET_STACK_KEY}')
